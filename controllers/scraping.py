from fastapi import HTTPException
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
from core.database import db
import time
import json
import csv

async def sync_data():
    driver = webdriver.Chrome()
    driver.get("https://www.gprocurement.go.th/new_index.html")

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"
    WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//a[contains(@onclick, \"searchannounce('D')\")]"))
    ).click()

    time.sleep(10)  # ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    columns = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®', '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á']
    all_data = []

    current_page = 1
    page_group_start = 1  # ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° pagination (1, 6, 11, ...)
    tr_index_start = 1  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î trDetail index

    while True:
        print(f"üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {current_page} ‚Üí trDetail{tr_index_start} - trDetail{tr_index_start + 9}")

        for i in range(tr_index_start, tr_index_start + 10):
            tr_id = f"trDetail{i}"
            try:
                row = WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located((By.ID, tr_id))
                )
                tds = row.find_elements(By.TAG_NAME, "td")
                row_data = {}
                for col_name, td in zip(columns, tds):
                    row_data[col_name] = td.text.strip()
                row_data['‡∏´‡∏ô‡πâ‡∏≤'] = current_page
                all_data.append(row_data)
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≤‡∏° {tr_id} (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠ timeout): {e}")
        
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏î‡πÉ‡∏ô pagination ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        next_page_num = page_group_start + ((current_page - 1) % 5)

        # ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 5 ‡∏•‡∏á‡∏ï‡∏±‡∏ß) ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        if (current_page % 5) == 0:
            # ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
            try:
                next_button_td = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//td[@onclick and contains(@onclick, 'pageNext')]"))
                )
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ onclick attribute ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏î‡πÑ‡∏î‡πâ)
                onclick_attr = next_button_td.get_attribute("onclick")
                if onclick_attr and "pageNext" in onclick_attr:
                    print(f"current_page: {current_page} ‚Üí ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'")
                    
                    driver.execute_script("arguments[0].click();", next_button_td)
                    time.sleep(3)  # ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    tr_index_start = 1  # ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï trDetail
                    current_page += 1
                    page_group_start += 5  # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 5
                else:
                    print(f"üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏î‡πâ: {onclick_attr} ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    break
            except Exception as e:
                print(f"üö´ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡πÑ‡∏î‡πâ: {e} ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                break
        else:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            next_page_to_click = page_group_start + ((current_page) % 5)  # ‡∏´‡∏ô‡πâ‡∏≤ ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏Å‡∏î

            # ‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ã‡πâ‡∏≥
            if next_page_to_click == current_page:
                print(f"current_page: {current_page} ‚Üí ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤")
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° tr_index_start ‡πÅ‡∏•‡∏∞ current_page ‡∏õ‡∏Å‡∏ï‡∏¥
                tr_index_start += 10
                current_page += 1
                continue

            try:
                print(f"current_page: {current_page} ‚Üí ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤ {next_page_to_click}")
                page_btn = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((
                        By.XPATH,
                        f"//td[@id='tdpage2' and @class='blue' and text()='{next_page_to_click}']"
                    ))
                )
                driver.execute_script("arguments[0].click();", page_btn)
                time.sleep(3)
                tr_index_start += 10
                current_page += 1
            except Exception as e:
                print(f"üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤ {next_page_to_click} ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e} ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                break

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DDMMYYHHmm
    timestamp = datetime.now().strftime("%d%m%y%H%M")
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ timestamp
    filenameJSON = f"file_{timestamp}.json"

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
    with open("./uploads/"+filenameJSON, 'w', encoding='utf-8') as f:
        json.dump(all_data, f, ensure_ascii=False, indent=4)

    print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_data)} ‡πÅ‡∏ñ‡∏ß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á egp_data.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    driver.quit()

    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
    with open('egp_data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ data ‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á dict
    # ‡πÄ‡∏ä‡πà‡∏ô [{...}, {...}, ...]

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (header) ‡∏à‡∏≤‡∏Å key ‡∏Ç‡∏≠‡∏á dict ‡πÅ‡∏£‡∏Å
    header = data[0].keys()

    filenameCSV = f"file_{timestamp}.csv"
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
    with open("./uploads/"+filenameCSV, 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=header)
        writer.writeheader()
        writer.writerows(data)

    print("‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô CSV ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")


    # Find all data in the collection
    all_data_db = await db["projects_gov"].find().to_list(length=None)

    #Loop array data
    for item in all_data:
        #Find project gov by ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á from all_data_db
        project_gov = next((proj for proj in all_data_db if proj.get("‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á") == item.get("‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á")), None)
        if project_gov:
            # Update the project_gov with new data
            await db["projects_gov"].update_one(
                {"_id": project_gov["_id"]},
                {"$set": {
                    "name": item.get("‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"),
                    "deptName": item.get("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"),
                    "announceData": item.get("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®"),
                    "budGet": item.get("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"),
                    "status": item.get("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
                    "relatedAnnouncement": item.get("‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
                }}
            )
        else:
            # Insert new project_gov if not found
            await db["projects_gov"].insert_one({
                "name": item.get("‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"),
                "deptName": item.get("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"),
                "announceData": item.get("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®"),
                "budGet": item.get("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"),
                "status": item.get("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
                "relatedAnnouncement": item.get("‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
            })
        pass

    raise HTTPException(status_code=200, detail="Data scraping and conversion completed successfully.")
