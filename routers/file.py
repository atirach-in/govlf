from fastapi import File, UploadFile, HTTPException, Depends,APIRouter
from fastapi.responses import JSONResponse
import pandas as pd
from io import BytesIO
import os
import logging
from datetime import datetime
import uuid
from pdf2image import convert_from_path
import easyocr
import numpy as np
import time
from transformers import pipeline
from controllers import scraping

router = APIRouter()

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° EasyOCR ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢+‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÇ‡∏´‡∏•‡∏î 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
ocr_reader = easyocr.Reader(['th', 'en'], gpu=False)

UPLOAD_DIR = "uploads"  # ‚úÖ ‡πÉ‡∏ä‡πâ uploads ‡πÅ‡∏ó‡∏ô
os.makedirs(UPLOAD_DIR, exist_ok=True)

ALLOWED_TYPES = [
    "application/pdf",
    "application/vnd.ms-excel",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
]

REQUIRED_COLUMNS = ["GENERICNAME"]

@router.post("/sync-data/")
async def sync_data():
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sync_data ‡∏à‡∏≤‡∏Å controllers.scraping
        await scraping.sync_data()
        return JSONResponse(status_code=200, content={"message": "Data scraping and conversion completed successfully."})
    except Exception as e:
        logging.error(f"Error during data scraping: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Data scraping failed: {str(e)}")

@router.post("/ocr-pdf/")
async def ocr_pdf(file: UploadFile = File(...)):
    if file.content_type != "application/pdf":
        raise HTTPException(status_code=400, detail="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞ TXT ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    file_id = str(uuid.uuid4())
    pdf_path = os.path.join(UPLOAD_DIR, f"{file_id}.pdf")
    txt_path = os.path.join(UPLOAD_DIR, f"{file_id}.txt")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    contents = await file.read()
    with open(pdf_path, "wb") as f:
        f.write(contents)

    try:
        # ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û
        images = convert_from_path(pdf_path, dpi=200)

        # ‡∏≠‡πà‡∏≤‡∏ô OCR ‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
        full_text = ""
        for i, img in enumerate(images):
            start = time.time()
            img_np = np.array(img)
            text_lines = ocr_reader.readtext(img_np, detail=0)
            page_text = "\n".join(text_lines)
            full_text += f"\n\n--- ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1} ---\n{page_text}"
            print(f"‡∏´‡∏ô‡πâ‡∏≤ {i+1} ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {time.time() - start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå .txt
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write(full_text)

        return JSONResponse({
            "message": "‚úÖ OCR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            "output_txt": txt_path
        })

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"OCR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")



# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢
def checkDate(date_str):
    if date_str is None or (isinstance(date_str, float) and pd.isna(date_str)):
        return None
    if isinstance(date_str, str) and date_str.strip() == "":
        return None
    try:
        return pd.to_datetime(date_str).date()
    except Exception:
        return None

def checkNull(value):
    if value is None or (isinstance(value, str) and value.strip() == ""):
        return None
    return str(value)

def is_int(value):
    try:
        return int(value)
    except (ValueError, TypeError):
        return None

def is_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return None

def main():
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î
    spell_checker = pipeline(
        "text2text-generation",
        model="tansongyang/thai-spell-check",
        tokenizer="tansongyang/thai-spell-check"
    )

    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏à‡∏≤‡∏Å OCR ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î)
    input_text = "‡∏â‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡∏ú‡∏¥‡∏î‡∏ß‡∏£‡∏£‡∏ì‡∏∞‡∏¢‡∏∏‡∏Ñ‡∏ï‡πå"

    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    result = spell_checker(
        input_text,
        max_length=128,
        clean_up_tokenization_spaces=True
    )[0]['generated_text']

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    print("üîç ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ :", input_text)
    print("‚úÖ ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ :", result)

if __name__ == "__main__":
    main()